postsubmits:
  kubernetes/org:
  - name: post-org-peribolos
    cluster: test-infra-trusted
    decorate: true
    max_concurrency: 1
    spec:
      containers:
      - image: launcher.gcr.io/google/bazel
        imagePullPolicy: Always
        command:
        - bazel
        args:
        - run
        - //admin:update
        - --
        - --github-endpoint=http://ghproxy.default.svc.cluster.local
        - --github-endpoint=https://api.github.com
        - --github-token-path=/etc/github-token/oauth
        - --tokens=1200
        - --confirm
        volumeMounts:
        - name: github
          mountPath: /etc/github-token
      volumes:
      - name: github
        secret:
          secretName: oauth-token
  kubernetes/test-infra:
  - name: post-test-infra-deploy-prow
    cluster: test-infra-trusted
    run_if_changed: 'prow/cluster/'
    decorate: true
    branches:
    - master
    spec:
      containers: # https://github.com/bazelbuild/rules_k8s make -C images/gcloud-bazel push PROJECT=k8s-testimages
      - image: gcr.io/k8s-testimages/gcloud-bazel:v20190402-v0.1-35-g8b2d62a
        command:
        - prow/deploy.sh
        args:
        - --confirm
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /creds/service-account.json
        volumeMounts:
        - name: creds
          mountPath: /creds
      volumes:
      - name: creds
        secret:
          secretName: deployer-service-account

  - name: post-test-infra-push-prow
    cluster: test-infra-trusted
    # Runs on more than just the Prow dir to include some additional images that we publish to gcr.io/k8s-prow.
    run_if_changed: '^(prow|ghproxy|label_sync|robots/commenter)/'
    decorate: true
    spec:
      containers:
      - image: gcr.io/k8s-testimages/kubekins-e2e:v20190329-811f7954b-master # whatever image you use here must have bash 4.4+
        command:
        - prow/push.sh
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /creds/service-account.json
        volumeMounts:
        - name: creds
          mountPath: /creds
      volumes:
      - name: creds
        secret:
          secretName: pusher-service-account
  kubernetes/k8s.io:
  - name: post-k8sio-cip
    cluster: test-infra-trusted
    decorate: true
    run_if_changed: ".*/manifest.yaml"
    # Never run more than 1 job at a time. This is because we don't want to run
    # into a case where an older manifest PR merge gets run last (after a newer
    # one).
    max_concurrency: 1
    branches:
    - ^master$
    spec:
      containers:
      - image: gcr.io/cip-demo-staging/cip:20190401-v1.0.0-3-g44d6169
        command:
        - multirun.sh
        args:
        - /app/cip-docker-image.binary
        - k8s-staging-cluster-api/manifest.yaml,/etc/k8s-gcr-prod-service-account/service-account.json
        - k8s-staging-coredns/manifest.yaml,/etc/k8s-gcr-prod-service-account/service-account.json
        - k8s-staging-csi/manifest.yaml,/etc/k8s-gcr-prod-service-account/service-account.json
        env:
        - name: CIP_OPTS
          value: "-dry-run=false"
        volumeMounts:
        - name: k8s-gcr-prod-service-account-creds
          mountPath: /etc/k8s-gcr-prod-service-account
          readOnly: true
      volumes:
      - name: k8s-gcr-prod-service-account-creds
        secret:
          secretName: k8s-gcr-prod-service-account


periodics:
- interval: 24h
  name: ci-org-peribolos
  cluster: test-infra-trusted
  decorate: true
  max_concurrency: 1
  extra_refs:
  - org: kubernetes
    repo: org
    base_ref: master
  spec:
    containers:
    - image: launcher.gcr.io/google/bazel
      imagePullPolicy: Always
      command:
      - bazel
      args:
      - run
      - //admin:update
      - --
      - --github-endpoint=http://ghproxy.default.svc.cluster.local
      - --github-endpoint=https://api.github.com
      - --github-token-path=/etc/github-token/oauth
      - --tokens=1200
      - --confirm
      volumeMounts:
      - name: github
        mountPath: /etc/github-token
    volumes:
    - name: github
      secret:
        secretName: oauth-token
- cron: "05 15 1-7 * 1"  # Run at 7:05 PST (15:05 UTC) on first monthly monday.
  name: ci-test-infra-autoupdate-minor
  cluster: test-infra-trusted
  decorate: true
  extra_refs:
  - org: kubernetes
    repo: test-infra
    base_ref: master
  spec:
    containers:
    - image: gcr.io/k8s-testimages/bazelbuild:v20190401-918468dbb-0.24.0
      command:
      - hack/autodeps.sh
      args:
      - k8s-ci-robot
      - /etc/github-token/oauth
      - "Kubernetes Prow Robot"
      - "k8s.ci.robot@gmail.com"
      - "--minor"
      volumeMounts:
      - name: github
        mountPath: /etc/github-token
        readOnly: true
      - name: ssh
        mountPath: /root/.ssh
    volumes:
    - name: github
      secret:
        secretName: oauth-token
    - name: ssh
      secret:
        secretName: k8s-ci-robot-ssh-keys
        defaultMode: 0400
- cron: "05 15 * * 1"  # Run at 7:05 PST (15:05 UTC) every Monday
  name: ci-test-infra-autoupdate-patch
  cluster: test-infra-trusted
  decorate: true
  extra_refs:
  - org: kubernetes
    repo: test-infra
    base_ref: master
  spec:
    containers:
    - image: gcr.io/k8s-testimages/bazelbuild:v20190401-918468dbb-0.24.0
      command:
      - hack/autodeps.sh
      args:
      - k8s-ci-robot
      - /etc/github-token/oauth
      - "Kubernetes Prow Robot"
      - "k8s.ci.robot@gmail.com"
      - "--patch"
      volumeMounts:
      - name: github
        mountPath: /etc/github-token
        readOnly: true
      - name: ssh
        mountPath: /root/.ssh
    volumes:
    - name: github
      secret:
        secretName: oauth-token
    - name: ssh
      secret:
        secretName: k8s-ci-robot-ssh-keys
        defaultMode: 0400
- cron: "05 15 * * 1-5"  # Run at 7:05 PST (15:05 UTC) Mon-Fri
  name: ci-test-infra-autobump-prow
  cluster: test-infra-trusted
  decorate: true
  extra_refs:
  - org: kubernetes
    repo: test-infra
    base_ref: master
  spec:
    containers:
    - image: gcr.io/k8s-testimages/bazelbuild:v20190401-918468dbb-0.24.0
      command:
      - prow/autobump.sh
      args:
      - k8s-ci-robot
      - /etc/github-token/oauth
      - "Kubernetes Prow Robot"
      - "k8s.ci.robot@gmail.com"
      volumeMounts:
      - name: github
        mountPath: /etc/github-token
        readOnly: true
      - name: ssh
        mountPath: /root/.ssh
    volumes:
    - name: github
      secret:
        secretName: oauth-token
    - name: ssh
      secret:
        secretName: k8s-ci-robot-ssh-keys
        defaultMode: 0400
- cron: "30 * * * *"  # Run at half past the hour, every hour, every day
  name: ci-test-infra-update-slack-oncall
  cluster: test-infra-trusted
  decorate: true
  extra_refs:
    - org: kubernetes
      repo: test-infra
      base_ref: master
  spec:
    containers:
    - image: launcher.gcr.io/google/bazel
      command:
      - bazel
      args:
      - run
      - //experiment/slack-oncall-updater
      - --
      - --token-path=/etc/slack-token/token
      - --group-id=SGLF0GUQH
      volumeMounts:
      - name: slack
        mountPath: /etc/slack-token
        readOnly: true
    volumes:
    - name: slack
      secret:
        secretName: slack-usergroup-token
- interval: 5m
  name: ci-test-infra-resultstore-upload
  cluster: test-infra-trusted
  decorate: true
  spec:
    containers:
    - image: gcr.io/k8s-testimages/resultstore:v20190311-3fc08c042
      command:
      - /app/experiment/resultstore/app.binary
      args:
      - --service-account=/etc/creds/service-account.json
      - --upload=k8s-prow
      - --deadline=10m
      - --latest=5
      - --gcs-auth
      volumeMounts:
      - name: creds
        mountPath: /etc/creds
        readOnly: true
    volumes:
    - name: creds
      secret:
        secretName: resultstore-service-account
- cron: "54 * * * *"  # Every hour at 54 minutes past the hour
  name: ci-test-infra-branchprotector
  cluster: test-infra-trusted
  labels:
    app: branchprotector
  decorate: true
  decoration_config:
    timeout: 18000000000000 # 5 hours
  extra_refs:
  - org: kubernetes
    repo: test-infra
    base_ref: master
  spec:
    containers:
    - name: branchprotector
      image: gcr.io/k8s-prow/branchprotector:v20190402-d1fb442b0
      command:
      - /app/prow/cmd/branchprotector/app.binary
      args:
      - --config-path=prow/config.yaml
      - --job-config-path=config
      - --github-token-path=/etc/github/oauth
      - --confirm
      - --github-endpoint=http://ghproxy.default.svc.cluster.local
      - --github-endpoint=https://api.github.com
      volumeMounts:
      - name: oauth
        mountPath: /etc/github
        readOnly: true
    volumes:
    - name: oauth
      secret:
        secretName: oauth-token
- cron: "17 * * * *"  # Every hour at 17 minutes past the hour
  name: ci-test-infra-label-sync
  cluster: test-infra-trusted
  labels:
    app: label-sync
  decorate: true
  spec:
    containers:
    - name: label-sync
      image: gcr.io/k8s-prow/label_sync:v20190402-d1fb442b0
      command:
      - /app/label_sync/app.binary
      args:
      - --config=/etc/config/labels.yaml
      - --confirm=true
      - --orgs=kubernetes,kubernetes-client,kubernetes-csi,kubernetes-incubator,kubernetes-sigs
      - --token=/etc/github/oauth
      - --endpoint=http://ghproxy.default.svc.cluster.local
      - --endpoint=https://api.github.com
      - --debug
      volumeMounts:
      - name: oauth
        mountPath: /etc/github
        readOnly: true
      - name: config
        mountPath: /etc/config
        readOnly: true
    volumes:
    - name: oauth
      secret:
        secretName: oauth-token
    - name: config
      configMap:
        name: label-config
# ci-k8sio-cip runs daily, to make sure that the destination GCRs do not deviate
# away from the intent of the manifest.
- interval: 24h
  max_concurrency: 1
  # This name is the "job name", passed in as "--job=NAME" for mkpj.
  name: ci-k8sio-cip
  # Enable Pod Utilities. See https://github.com/kubernetes/test-infra/blob/master/prow/pod-utilities.md.
  decorate: true
  extra_refs:
  # Because of Pod Utilities, we clone the below repo automatically, and, get
  # dropped into /home/prow/go/src/github.com/kubernetes/k8s.io.
  - org: kubernetes
    repo: k8s.io
    base_ref: master
  spec:
    containers:
    # TODO: Move the official cip image to a more serious location.
    #
    # To check the Go binary version in the image, run:
    #
    #   docker run --rm -it gcr.io/cip-demo-staging/cip:20190401-v1.0.0-3-g44d6169 "cip -version"
    #
    # You can also nspect the /cip folder in the image's filesystem with an
    # interactive bash session:
    #
    #   docker run --rm -it gcr.io/cip-demo-staging/cip:20190401-v1.0.0-3-g44d6169 "cd /cip && bash"
    - image: gcr.io/cip-demo-staging/cip:20190401-v1.0.0-3-g44d6169
      command:
      - multirun.sh
      args:
      # This is aided by Pod Utilities because of "decorate: true", which
      # populates the manifest repo for us. There is also PULL_REFS and
      # PULL_BASE_SHA defined for us.
      #
      # If you run mkpj for this postsubmit, the job will query you for the base
      # ref to fetch (name of a branch, not a SHA, e.g. "master").
      - /app/cip-docker-image.binary
      - k8s-staging-cluster-api/manifest.yaml,/etc/k8s-gcr-prod-service-account/service-account.json
      - k8s-staging-coredns/manifest.yaml,/etc/k8s-gcr-prod-service-account/service-account.json
      - k8s-staging-csi/manifest.yaml,/etc/k8s-gcr-prod-service-account/service-account.json
      env:
      - name: CIP_OPTS
        value: "-dry-run=false"
      # TODO: Uncomment this once
      # https://github.com/GoogleCloudPlatform/k8s-container-image-promoter/issues/16
      # lands.
      #- name: CIP_OPTS
      #  # Be aggressive about keeping the prod registry clean.
      #  value: "-delete-extra-tags"
      volumeMounts:
      - name: k8s-gcr-prod-service-account-creds
        mountPath: /etc/k8s-gcr-prod-service-account
        readOnly: true
    # Create a volume from a Kubernetes Secret. The Secret can be created as
    # per: https://kubernetes.io/docs/concepts/configuration/secret/.
    #
    # In our case we downloaded a service account secret key file from GCP, then ran
    #
    #   kubectl create secret generic k8s-gcr-prod-service-account \
    #     --from-file=service-account.json=PATH/TO/cip-demo-staging-e881274d0046.json
    #
    # and so our secretName is k8s-gcr-prod-service-account.
    volumes:
    - name: k8s-gcr-prod-service-account-creds
      secret:
        secretName: k8s-gcr-prod-service-account
